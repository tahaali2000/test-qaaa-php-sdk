<?php

declare(strict_types=1);

/*
 * PaginationTesterLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PaginationTesterLib\Tests\Controllers;

use PaginationTesterLib\Controllers\TransactionController;
use PaginationTesterLib\Exceptions;

class TransactionControllerTest extends BaseTestController
{
    /**
     * @var TransactionController TransactionController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getTransactionController();
    }

    public function testFetchWithOffset()
    {
        // Parameters for the API call
        $offset = 0;
        $limit = 10;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->fetchWithOffset($offset, $limit);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testFetchWithCursor()
    {
        // Parameters for the API call
        $cursor = 'txn_abc123';
        $limit = 10;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->fetchWithCursor($cursor, $limit);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testFetchWithLink()
    {
        // Parameters for the API call
        $page = 1;
        $size = 10;

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->fetchWithLink($page, $size);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json; charset=utf-8', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }
}
