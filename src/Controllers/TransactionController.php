<?php

declare(strict_types=1);

/*
 * PaginationTesterLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace PaginationTesterLib\Controllers;

use Core\Request\Parameters\QueryParam;
use CoreInterfaces\Core\Request\RequestMethod;
use PaginationTesterLib\Exceptions\ApiException;
use PaginationTesterLib\Models\TransactionsCursored;
use PaginationTesterLib\Models\TransactionsLinked;
use PaginationTesterLib\Models\TransactionsOffset;

class TransactionController extends BaseController
{
    /**
     * Fetch transactions using Cursor-based Pagination
     *
     * @param string|null $cursor The unique identifier (cursor) to fetch the next set of results.
     * @param int|null $limit Number of transactions per page.
     *
     * @return TransactionsCursored Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchWithCursor(?string $cursor = null, ?int $limit = 10): TransactionsCursored
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transactions/cursor')
            ->parameters(QueryParam::init('cursor', $cursor), QueryParam::init('limit', $limit));

        $_resHandler = $this->responseHandler()->type(TransactionsCursored::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch transactions using Link-based Pagination
     *
     * @param int|null $page The page number to fetch.
     * @param int|null $size Number of transactions per page.
     *
     * @return TransactionsLinked Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchWithLink(?int $page = 1, ?int $size = 10): TransactionsLinked
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transactions/links')
            ->parameters(QueryParam::init('page', $page), QueryParam::init('size', $size));

        $_resHandler = $this->responseHandler()->type(TransactionsLinked::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Fetch transactions using Offset-based Pagination
     *
     * @param int|null $offset The number of records to skip before selecting transactions.
     * @param int|null $limit Number of transactions per page.
     *
     * @return TransactionsOffset Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function fetchWithOffset(?int $offset = 0, ?int $limit = 10): TransactionsOffset
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/transactions/offset')
            ->parameters(QueryParam::init('offset', $offset), QueryParam::init('limit', $limit));

        $_resHandler = $this->responseHandler()->type(TransactionsOffset::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
